{"version":3,"sources":["components/Qnas/Qna/index.jsx","components/modal/index.jsx","components/Qnas/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Qna","id","console","log","axios","delete","then","res","alert","window","location","reload","catch","err","this","props","accodionKey","key","qna","accKey","className","role","data-toggle","data-parent","href","aria-expanded","aria-controls","title","slice","length","aria-labelledby","content","align","onClick","handleDelete","qnaid","React","Component","Modal","state","qcontent","loginMember","handleChange","e","setState","target","value","handleSubmit","Promise","resolve","reject","get","status","post","aregdate","awriter","qregdate","qwriter","data","tabindex","aria-hidden","type","data-dismiss","aria-label","for","onChange","aria-describedby","placeholder","Qnas","useState","qnas","setqnas","url","useEffect","a","result","fetchData","aria-multiselectable","map","item","idx","data-target","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b19fd63.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from 'axios';\nclass Qna extends React.Component {\n\nhandleDelete(id) {\n    console.log(id);\n    axios.delete(\"http://localhost:8080/api/QnAdelete/\"+id)\n    .then((res)=> {\n        alert(\"QnA가 삭제 완료\");\n        window.location.reload();\n    })\n    .catch(err => {\n        console.log(err);\n    })\n}\n  render() {\n    const { key, accodionKey, qna } = this.props;\n    const accKey = \"#collapseTwo\" + accodionKey;\n    return (\n      <>\n        <div className=\"panel panel-default\">\n          <div className=\"panel-heading\" role=\"tab\" id=\"headingTwo\">\n            <h4 className=\"panel-title\">\n              <a\n                className=\"collapsed\"\n                role=\"button\"\n                data-toggle=\"collapse\"\n                data-parent=\"#accordion\"\n                href={accKey}\n                aria-expanded=\"false\"\n                aria-controls=\"collapseTwo\"\n              >\n                Q. {qna.title}\n              </a>\n            </h4>\n          </div>\n          <div\n            id={accKey.slice(1, accKey.length)}\n            className=\"panel-collapse collapse\"\n            role=\"tabpanel\"\n            aria-labelledby=\"headingTwo\"\n          >\n            <div className=\"panel-body\">\n              A. {qna.content}\n              <div align=\"right\">\n                <div className=\"btn btn-danger\" id={accodionKey} onClick={()=>{this.handleDelete(qna.qnaid)}}>Delete</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Qna;\n","import React from \"react\";\nimport axios from \"axios\";\n\nclass Modal extends React.Component {\n  state = {\n    qcontent: \"\",\n    loginMember : {}\n  };\n  componentDidMount(){\n    const getLoginCheck = () => {\n      return new Promise((resolve, reject) => {\n        axios\n          .get(\"http://localhost:8080/api/loginid\")\n          .then(res => {\n            console.log(res);\n            console.log(\"data : \", res.data);\n            this.setState({...this.state, loginMember : res.data});\n            resolve();\n          })\n          .catch(err => {\n            alert(\"로그인 해주세요\");\n            reject();\n            // window.location = 'http://localhost:8080/';\n          });\n      });\n    };\n    getLoginCheck();\n  }\n  handleChange = e => {\n    this.setState({\n      qcontent: e.target.value\n    });\n  };\n  handleSubmit = () => {\n    const getLoginCheck = () => {\n      return new Promise((resolve, reject) => {\n        axios\n          .get(\"http://localhost:8080/api/loginid\")\n          .then(res => {\n            console.log(res.status);\n            resolve();\n          })\n          .catch(err => {\n            alert(\"로그인 해주세요\");\n            reject();\n            // window.location = 'http://localhost:8080/';\n          });\n      });\n    };\n    // 빌드후 수정\n    const postQnaRegist = () => {\n      return new Promise(resolve => {\n        axios\n          .post(\"http://localhost:8080/api/QnAregist\", {\n            aregdate: \"null\",\n            awriter: \"null\",\n            content: \"null\",\n            qnaid: 0,\n            qregdate: \"null\",\n            qwriter: \"ssafy\",\n            title: this.state.qcontent\n          })\n          .then(res => {\n            console.log(res);\n          })\n          .catch(err => {\n            console.log(err);\n          });\n      });\n    };\n    getLoginCheck().then(postQnaRegist);\n  };\n  render() {\n    return (\n      <>\n        <div\n          className=\"modal fade\"\n          id=\"exampleModalCenter\"\n          tabindex=\"-1\"\n          role=\"dialog\"\n          aria-labelledby=\"exampleModalCenterTitle\"\n          aria-hidden=\"true\"\n        >\n          <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n            <div className=\"modal-content\">\n              <div className=\"modal-header\" align=\"center\">\n                <h3 className=\"modal-title\" id=\"exampleModalCenterTitle\">\n                  QnA등록\n                </h3>\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n              <div className=\"modal-body\">\n                <form>\n                  <div className=\"form-group\">\n                    <label for=\"exampleInputEmail1\">질문</label>\n                    <input\n                      type=\"text\"\n                      onChange={this.handleChange}\n                      className=\"form-control\"\n                      id=\"exampleInputEmail1\"\n                      aria-describedby=\"emailHelp\"\n                      placeholder=\"질문 내용 입력...\"\n                    />\n                  </div>\n                </form>\n              </div>\n              <div className=\"modal-footer\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-dismiss=\"modal\"\n                >\n                  Close\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  onClick={this.handleSubmit}\n                >\n                  등록\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Modal;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Qna from './Qna';\nimport Modal from '../modal';\nconst Qnas = props => {\n  const [qnas, setqnas] = useState([]);\n  const [url, setUrl] = useState(`http://localhost:8080/api/findAllQna`);\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(url);\n      setqnas(result.data);\n    };\n    fetchData();\n  }, [url]);\n  console.log(qnas)\n  return (\n    <>\n      <div\n        className=\"panel-group\"\n        id=\"accordion\"\n        role=\"tablist\"\n        aria-multiselectable=\"true\"\n      >\n        {qnas.map((item, idx)=>{\n          return <Qna key={idx} accodionKey={idx} qna={item}/>;\n        })}\n      </div>\n      <div align=\"right\">\n        <button type=\"button\" className=\"glyphicon glyphicon-pencil btn btn-primary\" data-toggle=\"modal\"\n          data-target=\"#exampleModalCenter\"></button>\n      </div>\n      <Modal/>\n    </>\n  );\n};\n\nexport default Qnas;\n","import React from \"react\";\nimport \"./App.css\";\nimport Qna from \"./components/Qnas\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"page-header\">\n          <h1>QnA</h1>\n        </div>\n        <Qna />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}